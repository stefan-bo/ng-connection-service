{"version":3,"sources":["/./dist/ng-connection-service/fesm5/ng-connection-service.js","/./src/app/app.component.html","/./src/app/components/status-check/status-check.component.html","/./src/$_lazy_route_resource lazy namespace object","/./src/app/app.component.css","/./src/app/app.component.ts","/./src/app/app.module.ts","/./src/app/components/status-check/status-check.component.css","/./src/app/components/status-check/status-check.component.ts","/./src/environments/environment.ts","/./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmI;AAC3F;AACmD;AACvB;AACpB;;AAEhD;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA,wCAAwC,4DAAc;AACtD;AACA;AACA;AACA,2CAA2C,0DAAY;AACvD;AACA;AACA;AACA;AACA,8BAA8B,uDAAQ,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,oDAAK;AACxB,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,aAAa,oDAAK;AAClB;AACA;AACA;AACA,oCAAoC,kDAAK;AACzC,sBAAsB,gEAAS;AAC/B,wBAAwB;AACxB;AACA,yBAAyB,2FAA2F,uBAAuB,EAAE,EAAE,IAAI,gEAAS;AAC5J,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,gBAAgB,0DAAG;AACnB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,gBAAgB,4DAAK;AACrB,aAAa;AACb;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kCAAkC,sDAAS;AAC3C,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mCAAmC,sDAAS;AAC5C,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"main-es5.js","sourcesContent":["import { InjectionToken, Injectable, Inject, Optional, ɵɵdefineInjectable, ɵɵinject, EventEmitter, NgModule } from '@angular/core';\nimport { timer, fromEvent } from 'rxjs';\nimport { switchMap, retryWhen, tap, delay, debounceTime, startWith } from 'rxjs/operators';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { clone, isNil, defaults } from 'lodash';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * InjectionToken for specifing ConnectionService options.\r\n * @type {?}\r\n */\r\nvar ConnectionServiceOptionsToken = new InjectionToken('ConnectionServiceOptionsToken');\r\nvar ConnectionService = /** @class */ (function () {\r\n    function ConnectionService(http, options) {\r\n        this.http = http;\r\n        this.stateChangeEventEmitter = new EventEmitter();\r\n        this.currentState = {\r\n            hasInternetAccess: false,\r\n            hasNetworkConnection: window.navigator.onLine\r\n        };\r\n        this.serviceOptions = defaults({}, options, ConnectionService.DEFAULT_OPTIONS);\r\n        this.checkNetworkState();\r\n        this.checkInternetState();\r\n    }\r\n    Object.defineProperty(ConnectionService.prototype, \"options\", {\r\n        /**\r\n         * Current ConnectionService options. Notice that changing values of the returned object has not effect on service execution.\r\n         * You should use \"updateOptions\" function.\r\n         */\r\n        get: /**\r\n         * Current ConnectionService options. Notice that changing values of the returned object has not effect on service execution.\r\n         * You should use \"updateOptions\" function.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return clone(this.serviceOptions);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    ConnectionService.prototype.checkInternetState = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (!isNil(this.httpSubscription)) {\r\n            this.httpSubscription.unsubscribe();\r\n        }\r\n        if (this.serviceOptions.enableHeartbeat) {\r\n            this.httpSubscription = timer(0, this.serviceOptions.heartbeatInterval)\r\n                .pipe(switchMap((/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.http[_this.serviceOptions.requestMethod](_this.serviceOptions.heartbeatUrl, { responseType: 'text' }); })), retryWhen((/**\r\n             * @param {?} errors\r\n             * @return {?}\r\n             */\r\n            function (errors) {\r\n                return errors.pipe(\r\n                // log error message\r\n                tap((/**\r\n                 * @param {?} val\r\n                 * @return {?}\r\n                 */\r\n                function (val) {\r\n                    console.error('Http error:', val);\r\n                    _this.currentState.hasInternetAccess = false;\r\n                    _this.emitEvent();\r\n                })), \r\n                // restart after 5 seconds\r\n                delay(_this.serviceOptions.heartbeatRetryInterval));\r\n            })))\r\n                .subscribe((/**\r\n             * @param {?} result\r\n             * @return {?}\r\n             */\r\n            function (result) {\r\n                _this.currentState.hasInternetAccess = true;\r\n                _this.emitEvent();\r\n            }));\r\n        }\r\n        else {\r\n            this.currentState.hasInternetAccess = false;\r\n            this.emitEvent();\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    ConnectionService.prototype.checkNetworkState = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this.onlineSubscription = fromEvent(window, 'online').subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this.currentState.hasNetworkConnection = true;\r\n            _this.checkInternetState();\r\n            _this.emitEvent();\r\n        }));\r\n        this.offlineSubscription = fromEvent(window, 'offline').subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this.currentState.hasNetworkConnection = false;\r\n            _this.checkInternetState();\r\n            _this.emitEvent();\r\n        }));\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    ConnectionService.prototype.emitEvent = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.stateChangeEventEmitter.emit(this.currentState);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ConnectionService.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        try {\r\n            this.offlineSubscription.unsubscribe();\r\n            this.onlineSubscription.unsubscribe();\r\n            this.httpSubscription.unsubscribe();\r\n        }\r\n        catch (e) {\r\n        }\r\n    };\r\n    /**\r\n     * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\r\n     * function will not report current status of the connections when initially subscribed.\r\n     * @param reportCurrentState Report current state when initial subscription. Default is \"true\"\r\n     */\r\n    /**\r\n     * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\r\n     * function will not report current status of the connections when initially subscribed.\r\n     * @param {?=} reportCurrentState Report current state when initial subscription. Default is \"true\"\r\n     * @return {?}\r\n     */\r\n    ConnectionService.prototype.monitor = /**\r\n     * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\r\n     * function will not report current status of the connections when initially subscribed.\r\n     * @param {?=} reportCurrentState Report current state when initial subscription. Default is \"true\"\r\n     * @return {?}\r\n     */\r\n    function (reportCurrentState) {\r\n        if (reportCurrentState === void 0) { reportCurrentState = true; }\r\n        return reportCurrentState ?\r\n            this.stateChangeEventEmitter.pipe(debounceTime(300), startWith(this.currentState))\r\n            :\r\n                this.stateChangeEventEmitter.pipe(debounceTime(300));\r\n    };\r\n    /**\r\n     * Update options of the service. You could specify partial options object. Values that are not specified will use default / previous\r\n     * option values.\r\n     * @param options Partial option values.\r\n     */\r\n    /**\r\n     * Update options of the service. You could specify partial options object. Values that are not specified will use default / previous\r\n     * option values.\r\n     * @param {?} options Partial option values.\r\n     * @return {?}\r\n     */\r\n    ConnectionService.prototype.updateOptions = /**\r\n     * Update options of the service. You could specify partial options object. Values that are not specified will use default / previous\r\n     * option values.\r\n     * @param {?} options Partial option values.\r\n     * @return {?}\r\n     */\r\n    function (options) {\r\n        this.serviceOptions = defaults({}, options, this.serviceOptions);\r\n        this.checkInternetState();\r\n    };\r\n    ConnectionService.DEFAULT_OPTIONS = {\r\n        enableHeartbeat: true,\r\n        heartbeatUrl: '//internethealthtest.org',\r\n        heartbeatInterval: 30000,\r\n        heartbeatRetryInterval: 1000,\r\n        requestMethod: 'head'\r\n    };\r\n    ConnectionService.decorators = [\r\n        { type: Injectable, args: [{\r\n                    providedIn: 'root'\r\n                },] }\r\n    ];\r\n    /** @nocollapse */\r\n    ConnectionService.ctorParameters = function () { return [\r\n        { type: HttpClient },\r\n        { type: undefined, decorators: [{ type: Inject, args: [ConnectionServiceOptionsToken,] }, { type: Optional }] }\r\n    ]; };\r\n    /** @nocollapse */ ConnectionService.ngInjectableDef = ɵɵdefineInjectable({ factory: function ConnectionService_Factory() { return new ConnectionService(ɵɵinject(HttpClient), ɵɵinject(ConnectionServiceOptionsToken, 8)); }, token: ConnectionService, providedIn: \"root\" });\r\n    return ConnectionService;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar ConnectionServiceModule = /** @class */ (function () {\r\n    function ConnectionServiceModule() {\r\n    }\r\n    ConnectionServiceModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [HttpClientModule],\r\n                    providers: [ConnectionService]\r\n                },] }\r\n    ];\r\n    return ConnectionServiceModule;\r\n}());\n\nexport { ConnectionService, ConnectionServiceModule, ConnectionServiceOptionsToken };\n//# sourceMappingURL=ng-connection-service.js.map\n","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n<div style=\\\"text-align:center\\\">\\r\\n  <h1>Internet connection status</h1>\\r\\n\\r\\n  <h3>Try to disconnect and reconnect your internet connection and observe the live status</h3>\\r\\n  <br>\\r\\n  <app-status-check></app-status-check>\\r\\n\\r\\n  <app-status-check></app-status-check>\\r\\n\\r\\n  <button *ngIf=\\\"!heartBeatState\\\" (click)=\\\"setHeartBeatState(true)\\\">Enable HeartBeat Check</button>\\r\\n  <button *ngIf=\\\"heartBeatState\\\" (click)=\\\"setHeartBeatState(false)\\\">Disable HeartBeat Check</button>\\r\\n\\r\\n</div>\\r\\n\"","module.exports = \"<h1>\\r\\n  Network Status: <span [ngStyle]=\\\"{'color':currentState?.hasNetworkConnection?'green':'red'}\\\">\\r\\n      {{ currentState?.hasNetworkConnection ? 'ONLINE' : 'OFFLINE' }}!\\r\\n    </span><br>\\r\\n  Internet Status: <span [ngStyle]=\\\"{'color':currentState?.hasInternetAccess?'green':'red'}\\\">\\r\\n      {{ currentState?.hasInternetAccess ? 'ONLINE' : 'OFFLINE' }}!\\r\\n    </span>\\r\\n</h1>\\r\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import {Component} from '@angular/core';\r\nimport {ConnectionService} from 'ng-connection-service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  heartBeatState;\r\n\r\n  constructor(private connectionService: ConnectionService) {\r\n    this.heartBeatState = this.connectionService.options.enableHeartbeat;\r\n  }\r\n\r\n  setHeartBeatState(state: boolean) {\r\n    this.heartBeatState = state;\r\n    this.connectionService.updateOptions({enableHeartbeat: state});\r\n  }\r\n}\r\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {AppComponent} from './app.component';\r\nimport {ConnectionServiceModule, ConnectionServiceOptions, ConnectionServiceOptionsToken} from 'ng-connection-service';\r\nimport { StatusCheckComponent } from './components/status-check/status-check.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    StatusCheckComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    ConnectionServiceModule\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: ConnectionServiceOptionsToken,\r\n      useValue: <ConnectionServiceOptions>{\r\n        // enableHeartbeat: false,\r\n        // heartbeatUrl: '/assets/ping.json',\r\n        // requestMethod: 'get',\r\n        // heartbeatInterval: 3000\r\n      }\r\n    }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvc3RhdHVzLWNoZWNrL3N0YXR1cy1jaGVjay5jb21wb25lbnQuY3NzIn0= */\"","import {Component} from '@angular/core';\r\nimport {ConnectionState, ConnectionService} from 'ng-connection-service';\r\n\r\n@Component({\r\n  selector: 'app-status-check',\r\n  templateUrl: './status-check.component.html',\r\n  styleUrls: ['./status-check.component.css']\r\n})\r\nexport class StatusCheckComponent {\r\n\r\n  currentState: ConnectionState;\r\n\r\n  constructor(private connectionService: ConnectionService) {\r\n    this.connectionService.monitor().subscribe((currentState: ConnectionState) => {\r\n      console.log(currentState);\r\n      this.currentState = currentState;\r\n    });\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}