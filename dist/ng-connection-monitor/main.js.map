{"version":3,"sources":["./dist/ng-connection-service/fesm5/ng-connection-service.js","./src/app/app.component.html","./src/app/components/status-check/status-check.component.html","./src/$_lazy_route_resource lazy namespace object","./src/app/app.component.css","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/status-check/status-check.component.css","./src/app/components/status-check/status-check.component.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmI;AAC3F;AACmD;AACvB;AACpB;;AAEhD;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA,wCAAwC,4DAAc;AACtD;AACA;AACA;AACA,2CAA2C,0DAAY;AACvD;AACA;AACA;AACA;AACA,8BAA8B,uDAAQ,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,oDAAK;AACxB,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,aAAa,oDAAK;AAClB;AACA;AACA;AACA,oCAAoC,kDAAK;AACzC,sBAAsB,gEAAS;AAC/B,wBAAwB;AACxB;AACA,yBAAyB,2FAA2F,uBAAuB,EAAE,EAAE,IAAI,gEAAS;AAC5J,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,gBAAgB,0DAAG;AACnB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,gBAAgB,4DAAK;AACrB,aAAa;AACb;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kCAAkC,sDAAS;AAC3C,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mCAAmC,sDAAS;AAC5C,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"main.js","sourcesContent":["import { InjectionToken, Injectable, Inject, Optional, ɵɵdefineInjectable, ɵɵinject, EventEmitter, NgModule } from '@angular/core';\nimport { timer, fromEvent } from 'rxjs';\nimport { switchMap, retryWhen, tap, delay, debounceTime, startWith } from 'rxjs/operators';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { clone, isNil, defaults } from 'lodash';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * InjectionToken for specifing ConnectionService options.\n * @type {?}\n */\nvar ConnectionServiceOptionsToken = new InjectionToken('ConnectionServiceOptionsToken');\nvar ConnectionService = /** @class */ (function () {\n    function ConnectionService(http, options) {\n        this.http = http;\n        this.stateChangeEventEmitter = new EventEmitter();\n        this.currentState = {\n            hasInternetAccess: false,\n            hasNetworkConnection: window.navigator.onLine\n        };\n        this.serviceOptions = defaults({}, options, ConnectionService.DEFAULT_OPTIONS);\n        this.checkNetworkState();\n        this.checkInternetState();\n    }\n    Object.defineProperty(ConnectionService.prototype, \"options\", {\n        /**\n         * Current ConnectionService options. Notice that changing values of the returned object has not effect on service execution.\n         * You should use \"updateOptions\" function.\n         */\n        get: /**\n         * Current ConnectionService options. Notice that changing values of the returned object has not effect on service execution.\n         * You should use \"updateOptions\" function.\n         * @return {?}\n         */\n        function () {\n            return clone(this.serviceOptions);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @private\n     * @return {?}\n     */\n    ConnectionService.prototype.checkInternetState = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!isNil(this.httpSubscription)) {\n            this.httpSubscription.unsubscribe();\n        }\n        if (this.serviceOptions.enableHeartbeat) {\n            this.httpSubscription = timer(0, this.serviceOptions.heartbeatInterval)\n                .pipe(switchMap((/**\n             * @return {?}\n             */\n            function () { return _this.http[_this.serviceOptions.requestMethod](_this.serviceOptions.heartbeatUrl, { responseType: 'text' }); })), retryWhen((/**\n             * @param {?} errors\n             * @return {?}\n             */\n            function (errors) {\n                return errors.pipe(\n                // log error message\n                tap((/**\n                 * @param {?} val\n                 * @return {?}\n                 */\n                function (val) {\n                    console.error('Http error:', val);\n                    _this.currentState.hasInternetAccess = false;\n                    _this.emitEvent();\n                })), \n                // restart after 5 seconds\n                delay(_this.serviceOptions.heartbeatRetryInterval));\n            })))\n                .subscribe((/**\n             * @param {?} result\n             * @return {?}\n             */\n            function (result) {\n                _this.currentState.hasInternetAccess = true;\n                _this.emitEvent();\n            }));\n        }\n        else {\n            this.currentState.hasInternetAccess = false;\n            this.emitEvent();\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    ConnectionService.prototype.checkNetworkState = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.onlineSubscription = fromEvent(window, 'online').subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this.currentState.hasNetworkConnection = true;\n            _this.checkInternetState();\n            _this.emitEvent();\n        }));\n        this.offlineSubscription = fromEvent(window, 'offline').subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this.currentState.hasNetworkConnection = false;\n            _this.checkInternetState();\n            _this.emitEvent();\n        }));\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    ConnectionService.prototype.emitEvent = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        this.stateChangeEventEmitter.emit(this.currentState);\n    };\n    /**\n     * @return {?}\n     */\n    ConnectionService.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        try {\n            this.offlineSubscription.unsubscribe();\n            this.onlineSubscription.unsubscribe();\n            this.httpSubscription.unsubscribe();\n        }\n        catch (e) {\n        }\n    };\n    /**\n     * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\n     * function will not report current status of the connections when initially subscribed.\n     * @param reportCurrentState Report current state when initial subscription. Default is \"true\"\n     */\n    /**\n     * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\n     * function will not report current status of the connections when initially subscribed.\n     * @param {?=} reportCurrentState Report current state when initial subscription. Default is \"true\"\n     * @return {?}\n     */\n    ConnectionService.prototype.monitor = /**\n     * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\n     * function will not report current status of the connections when initially subscribed.\n     * @param {?=} reportCurrentState Report current state when initial subscription. Default is \"true\"\n     * @return {?}\n     */\n    function (reportCurrentState) {\n        if (reportCurrentState === void 0) { reportCurrentState = true; }\n        return reportCurrentState ?\n            this.stateChangeEventEmitter.pipe(debounceTime(300), startWith(this.currentState))\n            :\n                this.stateChangeEventEmitter.pipe(debounceTime(300));\n    };\n    /**\n     * Update options of the service. You could specify partial options object. Values that are not specified will use default / previous\n     * option values.\n     * @param options Partial option values.\n     */\n    /**\n     * Update options of the service. You could specify partial options object. Values that are not specified will use default / previous\n     * option values.\n     * @param {?} options Partial option values.\n     * @return {?}\n     */\n    ConnectionService.prototype.updateOptions = /**\n     * Update options of the service. You could specify partial options object. Values that are not specified will use default / previous\n     * option values.\n     * @param {?} options Partial option values.\n     * @return {?}\n     */\n    function (options) {\n        this.serviceOptions = defaults({}, options, this.serviceOptions);\n        this.checkInternetState();\n    };\n    ConnectionService.DEFAULT_OPTIONS = {\n        enableHeartbeat: true,\n        heartbeatUrl: '//internethealthtest.org',\n        heartbeatInterval: 30000,\n        heartbeatRetryInterval: 1000,\n        requestMethod: 'head'\n    };\n    ConnectionService.decorators = [\n        { type: Injectable, args: [{\n                    providedIn: 'root'\n                },] }\n    ];\n    /** @nocollapse */\n    ConnectionService.ctorParameters = function () { return [\n        { type: HttpClient },\n        { type: undefined, decorators: [{ type: Inject, args: [ConnectionServiceOptionsToken,] }, { type: Optional }] }\n    ]; };\n    /** @nocollapse */ ConnectionService.ngInjectableDef = ɵɵdefineInjectable({ factory: function ConnectionService_Factory() { return new ConnectionService(ɵɵinject(HttpClient), ɵɵinject(ConnectionServiceOptionsToken, 8)); }, token: ConnectionService, providedIn: \"root\" });\n    return ConnectionService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar ConnectionServiceModule = /** @class */ (function () {\n    function ConnectionServiceModule() {\n    }\n    ConnectionServiceModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [HttpClientModule],\n                    providers: [ConnectionService]\n                },] }\n    ];\n    return ConnectionServiceModule;\n}());\n\nexport { ConnectionService, ConnectionServiceModule, ConnectionServiceOptionsToken };\n//# sourceMappingURL=ng-connection-service.js.map\n","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>Internet connection status</h1>\\n\\n  <h3>Try to disconnect and reconnect your internet connection and observe the live status</h3>\\n  <br>\\n\\n  <app-status-check></app-status-check>\\n\\n  <button *ngIf=\\\"!heartBeatState\\\" (click)=\\\"setHeartBeatState(true)\\\">Enable HeartBeat Check</button>\\n  <button *ngIf=\\\"heartBeatState\\\" (click)=\\\"setHeartBeatState(false)\\\">Disable HeartBeat Check</button>\\n\\n</div>\\n\"","module.exports = \"<h1>\\n  Network Status: <span [ngStyle]=\\\"{'color':currentState?.hasNetworkConnection?'green':'red'}\\\">\\n      {{ currentState?.hasNetworkConnection ? 'ONLINE' : 'OFFLINE' }}!\\n    </span><br>\\n  Internet Status: <span [ngStyle]=\\\"{'color':currentState?.hasInternetAccess?'green':'red'}\\\">\\n      {{ currentState?.hasInternetAccess ? 'ONLINE' : 'OFFLINE' }}!\\n    </span>\\n</h1>\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Component } from '@angular/core';\nimport { ConnectionService } from 'ng-connection-service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  heartBeatState;\n\n  constructor(private connectionService: ConnectionService) {\n    this.heartBeatState = this.connectionService.options.enableHeartbeat;\n  }\n\n  setHeartBeatState(state: boolean) {\n    this.heartBeatState = state;\n    this.connectionService.updateOptions({ enableHeartbeat: state });\n  }\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppComponent} from './app.component';\nimport {ConnectionServiceModule, ConnectionServiceOptions, ConnectionServiceOptionsToken} from 'ng-connection-service';\nimport { StatusCheckComponent } from './components/status-check/status-check.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    StatusCheckComponent\n  ],\n  imports: [\n    BrowserModule,\n    ConnectionServiceModule\n  ],\n  providers: [\n    {\n      provide: ConnectionServiceOptionsToken,\n      useValue: <ConnectionServiceOptions>{\n        // enableHeartbeat: true,\n        // heartbeatUrl: '/api/v1/conexion/test',\n        // requestMethod: 'get',\n        // heartbeatInterval: 3000\n      }\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvc3RhdHVzLWNoZWNrL3N0YXR1cy1jaGVjay5jb21wb25lbnQuY3NzIn0= */\"","import {Component} from '@angular/core';\nimport {ConnectionState, ConnectionService} from 'ng-connection-service';\n\n@Component({\n  selector: 'app-status-check',\n  templateUrl: './status-check.component.html',\n  styleUrls: ['./status-check.component.css']\n})\nexport class StatusCheckComponent {\n\n  currentState: ConnectionState;\n\n  constructor(private connectionService: ConnectionService) {\n    this.connectionService.monitor().subscribe((currentState: ConnectionState) => {\n      console.log(currentState);\n      this.currentState = currentState;\n    });\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":"webpack:///"}