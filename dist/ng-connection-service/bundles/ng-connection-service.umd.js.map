{"version":3,"file":"ng-connection-service.umd.js","sources":["ng://ng-connection-service/lib/connection-service.service.ts","ng://ng-connection-service/lib/connection-service.module.ts"],"sourcesContent":["import {EventEmitter, Inject, Injectable, InjectionToken, OnDestroy, Optional} from '@angular/core';\nimport {fromEvent, Observable, Subscription, timer} from 'rxjs';\nimport {debounceTime, delay, retryWhen, startWith, switchMap, tap} from 'rxjs/operators';\nimport {HttpClient} from '@angular/common/http';\nimport * as _ from 'lodash';\n\n/**\n * Instance of this interface is used to report current connection status.\n */\nexport interface ConnectionState {\n  /**\n   * \"True\" if browser has network connection. Determined by Window objects \"online\" / \"offline\" events.\n   */\n  hasNetworkConnection: boolean;\n  /**\n   * \"True\" if browser has Internet access. Determined by heartbeat system which periodically makes request to heartbeat Url.\n   */\n  hasInternetAccess: boolean;\n}\n\n/**\n * Instance of this interface could be used to configure \"ConnectionService\".\n */\nexport interface ConnectionServiceOptions {\n  /**\n   * Controls the Internet connectivity heartbeat system. Default value is 'true'.\n   */\n  enableHeartbeat?: boolean;\n  /**\n   * Url used for checking Internet connectivity, heartbeat system periodically makes \"HEAD\" requests to this URL to determine Internet\n   * connection status. Default value is \"//internethealthtest.org\".\n   */\n  heartbeatUrl?: string;\n  /**\n   * Interval used to check Internet connectivity specified in milliseconds. Default value is \"30000\".\n   */\n  heartbeatInterval?: number;\n  /**\n   * Interval used to retry Internet connectivity checks when an error is detected (when no Internet connection). Default value is \"1000\".\n   */\n  heartbeatRetryInterval?: number;\n  /**\n   * HTTP method used for requesting heartbeat Url. Default is 'head'.\n   */\n  requestMethod?: 'get' | 'post' | 'head' | 'options';\n\n}\n\n/**\n * InjectionToken for specifing ConnectionService options.\n */\nexport const ConnectionServiceOptionsToken: InjectionToken<ConnectionServiceOptions> = new InjectionToken('ConnectionServiceOptionsToken');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectionService implements OnDestroy {\n  private static DEFAULT_OPTIONS: ConnectionServiceOptions = {\n    enableHeartbeat: true,\n    heartbeatUrl: '//internethealthtest.org',\n    heartbeatInterval: 30000,\n    heartbeatRetryInterval: 1000,\n    requestMethod: 'head'\n  };\n\n  private stateChangeEventEmitter = new EventEmitter<ConnectionState>();\n\n  private currentState: ConnectionState = {\n    hasInternetAccess: false,\n    hasNetworkConnection: window.navigator.onLine\n  };\n  private offlineSubscription: Subscription;\n  private onlineSubscription: Subscription;\n  private httpSubscription: Subscription;\n  private serviceOptions: ConnectionServiceOptions;\n\n  /**\n   * Current ConnectionService options. Notice that changing values of the returned object has not effect on service execution.\n   * You should use \"updateOptions\" function.\n   */\n  get options(): ConnectionServiceOptions {\n    return _.clone(this.serviceOptions);\n  }\n\n  constructor(private http: HttpClient, @Inject(ConnectionServiceOptionsToken) @Optional() options: ConnectionServiceOptions) {\n    this.serviceOptions = _.defaults({}, options, ConnectionService.DEFAULT_OPTIONS);\n\n    this.checkNetworkState();\n    this.checkInternetState();\n  }\n\n  private checkInternetState() {\n\n    if (!_.isNil(this.httpSubscription)) {\n      this.httpSubscription.unsubscribe();\n    }\n\n    if (this.serviceOptions.enableHeartbeat) {\n      this.httpSubscription = timer(0, this.serviceOptions.heartbeatInterval)\n        .pipe(\n          switchMap(() => this.http[this.serviceOptions.requestMethod](this.serviceOptions.heartbeatUrl, {responseType: 'text'})),\n          retryWhen(errors =>\n            errors.pipe(\n              // log error message\n              tap(val => {\n                console.error('Http error:', val);\n                this.currentState.hasInternetAccess = false;\n                this.emitEvent();\n              }),\n              // restart after 5 seconds\n              delay(this.serviceOptions.heartbeatRetryInterval)\n            )\n          )\n        )\n        .subscribe(result => {\n          this.currentState.hasInternetAccess = true;\n          this.emitEvent();\n        });\n    } else {\n      this.currentState.hasInternetAccess = false;\n      this.emitEvent();\n    }\n  }\n\n  private checkNetworkState() {\n    this.onlineSubscription = fromEvent(window, 'online').subscribe(() => {\n      this.currentState.hasNetworkConnection = true;\n      this.checkInternetState();\n      this.emitEvent();\n    });\n\n    this.offlineSubscription = fromEvent(window, 'offline').subscribe(() => {\n      this.currentState.hasNetworkConnection = false;\n      this.checkInternetState();\n      this.emitEvent();\n    });\n  }\n\n  private emitEvent() {\n    this.stateChangeEventEmitter.emit(this.currentState);\n  }\n\n  ngOnDestroy(): void {\n    try {\n      this.offlineSubscription.unsubscribe();\n      this.onlineSubscription.unsubscribe();\n      this.httpSubscription.unsubscribe();\n    } catch (e) {\n    }\n  }\n\n  /**\n   * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\n   * function will not report current status of the connections when initially subscribed.\n   * @param reportCurrentState Report current state when initial subscription. Default is \"true\"\n   */\n  monitor(reportCurrentState = true): Observable<ConnectionState> {\n    return reportCurrentState ?\n      this.stateChangeEventEmitter.pipe(\n        debounceTime(300),\n        startWith(this.currentState),\n      )\n      :\n      this.stateChangeEventEmitter.pipe(\n        debounceTime(300)\n      );\n  }\n\n  /**\n   * Update options of the service. You could specify partial options object. Values that are not specified will use default / previous\n   * option values.\n   * @param options Partial option values.\n   */\n  updateOptions(options: Partial<ConnectionServiceOptions>) {\n    this.serviceOptions = _.defaults({}, options, this.serviceOptions);\n    this.checkInternetState();\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {ConnectionService} from './connection-service.service';\nimport {HttpClientModule} from '@angular/common/http';\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [ConnectionService]\n})\nexport class ConnectionServiceModule {\n}\n"],"names":["InjectionToken","EventEmitter","_.defaults","_.clone","_.isNil","timer","switchMap","retryWhen","tap","delay","fromEvent","debounceTime","startWith","Injectable","HttpClient","Inject","Optional","NgModule","HttpClientModule"],"mappings":"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"}