!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/common/http"),require("@angular/core"),require("rxjs"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("ng-connection-service",["exports","@angular/common/http","@angular/core","rxjs","rxjs/operators"],e):e((t=t||self)["ng-connection-service"]={},t.ng.common.http,t.ng.core,t.rxjs,t.rxjs.operators)}(this,function(t,e,n,r,i){"use strict";var o=function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},s=new n.InjectionToken("ConnectionServiceOptionsToken"),c=function(){function t(e,r){this.http=e,this.stateChangeEventEmitter=new n.EventEmitter,this.currentState={hasInternetAccess:!1,hasNetworkConnection:window.navigator.onLine},this.serviceOptions=o({},t.DEFAULT_OPTIONS,r),this.checkNetworkState(),this.checkInternetState()}return Object.defineProperty(t.prototype,"options",{get:function(){return o({},this.serviceOptions)},enumerable:!0,configurable:!0}),t.prototype.checkInternetState=function(){var t=this;this.httpSubscription!==undefined&&this.httpSubscription.unsubscribe(),this.serviceOptions.enableHeartbeat?this.httpSubscription=r.timer(0,this.serviceOptions.heartbeatInterval).pipe(i.switchMap(function(){return t.http[t.serviceOptions.requestMethod](t.serviceOptions.heartbeatUrl,{responseType:"text"})}),i.retryWhen(function(e){return e.pipe(i.tap(function(e){console.error("Http error:",e),t.currentState.hasInternetAccess=!1,t.emitEvent()}),i.delay(t.serviceOptions.heartbeatRetryInterval))})).subscribe(function(e){t.currentState.hasInternetAccess=!0,t.emitEvent()}):(this.currentState.hasInternetAccess=!1,this.emitEvent())},t.prototype.checkNetworkState=function(){var t=this;this.onlineSubscription=r.fromEvent(window,"online").subscribe(function(){t.currentState.hasNetworkConnection=!0,t.checkInternetState(),t.emitEvent()}),this.offlineSubscription=r.fromEvent(window,"offline").subscribe(function(){t.currentState.hasNetworkConnection=!1,t.checkInternetState(),t.emitEvent()})},t.prototype.emitEvent=function(){this.stateChangeEventEmitter.emit(this.currentState)},t.prototype.ngOnDestroy=function(){try{this.offlineSubscription.unsubscribe(),this.onlineSubscription.unsubscribe(),this.httpSubscription.unsubscribe()}catch(t){}},t.prototype.monitor=function(t){return void 0===t&&(t=!0),t?this.stateChangeEventEmitter.pipe(i.debounceTime(300),i.startWith(this.currentState)):this.stateChangeEventEmitter.pipe(i.debounceTime(300))},t.prototype.updateOptions=function(t){this.serviceOptions=o({},this.serviceOptions,t),this.checkInternetState()},t.DEFAULT_OPTIONS={enableHeartbeat:!0,heartbeatUrl:"//internethealthtest.org",heartbeatInterval:3e4,heartbeatRetryInterval:1e3,requestMethod:"head"},t.decorators=[{type:n.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:e.HttpClient},{type:undefined,decorators:[{type:n.Inject,args:[s]},{type:n.Optional}]}]},t.ngInjectableDef=n.ɵɵdefineInjectable({factory:function(){return new t(n.ɵɵinject(e.HttpClient),n.ɵɵinject(s,8))},token:t,providedIn:"root"}),t}(),a=function(){function t(){}return t.decorators=[{type:n.NgModule,args:[{imports:[e.HttpClientModule],providers:[c]}]}],t}();t.ConnectionService=c,t.ConnectionServiceModule=a,t.ConnectionServiceOptionsToken=s,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ng-connection-service.umd.min.js.map