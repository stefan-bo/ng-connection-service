{"version":3,"sources":["ng://ng-connection-service/lib/connection-service.service.ts","ng://ng-connection-service/lib/connection-service.module.ts"],"names":["ConnectionServiceOptionsToken","InjectionToken","ConnectionService","http","options","this","stateChangeEventEmitter","EventEmitter","currentState","hasInternetAccess","hasNetworkConnection","window","navigator","onLine","serviceOptions","_.defaults","DEFAULT_OPTIONS","checkNetworkState","checkInternetState","Object","defineProperty","prototype","_.clone","_this","_.isNil","httpSubscription","unsubscribe","enableHeartbeat","timer","heartbeatInterval","pipe","switchMap","requestMethod","heartbeatUrl","responseType","retryWhen","errors","tap","val","console","error","emitEvent","delay","heartbeatRetryInterval","subscribe","result","onlineSubscription","fromEvent","offlineSubscription","emit","ngOnDestroy","e","monitor","reportCurrentState","debounceTime","startWith","updateOptions","Injectable","args","providedIn","HttpClient","Inject","type","Optional","ConnectionServiceModule","NgModule","imports","HttpClientModule","providers"],"mappings":"gfAmDA,IAAaA,EAA0E,IAAIC,EAAAA,eAAe,iCAE1GC,EAAA,WA+BE,SAAAA,EAAoBC,EAAqEC,GAArEC,KAAAF,KAAAA,EAnBZE,KAAAC,wBAA0B,IAAIC,EAAAA,aAE9BF,KAAAG,aAAgC,CACtCC,mBAAmB,EACnBC,qBAAsBC,OAAOC,UAAUC,QAgBvCR,KAAKS,eAAiBC,EAAAA,SAAW,GAAIX,EAASF,EAAkBc,iBAEhEX,KAAKY,oBACLZ,KAAKa,4BARPC,OAAAC,eAAIlB,EAAAmB,UAAA,UAAO,KAAX,WACE,OAAOC,EAAAA,MAAQjB,KAAKS,iDAUdZ,EAAAmB,UAAAH,mBAAR,WAAA,IAAAK,EAAAlB,KAEOmB,EAAAA,MAAQnB,KAAKoB,mBAChBpB,KAAKoB,iBAAiBC,cAGpBrB,KAAKS,eAAea,gBACtBtB,KAAKoB,iBAAmBG,EAAAA,MAAM,EAAGvB,KAAKS,eAAee,mBAClDC,KACCC,EAAAA,UAAS,WAAO,OAAAR,EAAKpB,KAAKoB,EAAKT,eAAekB,eAAeT,EAAKT,eAAemB,aAAc,CAACC,aAAc,WAC9GC,EAAAA,UAAS,SAACC,GACR,OAAAA,EAAON,KAELO,EAAAA,IAAG,SAACC,GACFC,QAAQC,MAAM,cAAeF,GAC7Bf,EAAKf,aAAaC,mBAAoB,EACtCc,EAAKkB,cAGPC,EAAAA,MAAMnB,EAAKT,eAAe6B,4BAI/BC,UAAS,SAACC,GACTtB,EAAKf,aAAaC,mBAAoB,EACtCc,EAAKkB,eAGTpC,KAAKG,aAAaC,mBAAoB,EACtCJ,KAAKoC,cAIDvC,EAAAmB,UAAAJ,kBAAR,WAAA,IAAAM,EAAAlB,KACEA,KAAKyC,mBAAqBC,EAAAA,UAAUpC,OAAQ,UAAUiC,UAAS,WAC7DrB,EAAKf,aAAaE,sBAAuB,EACzCa,EAAKL,qBACLK,EAAKkB,cAGPpC,KAAK2C,oBAAsBD,EAAAA,UAAUpC,OAAQ,WAAWiC,UAAS,WAC/DrB,EAAKf,aAAaE,sBAAuB,EACzCa,EAAKL,qBACLK,EAAKkB,eAIDvC,EAAAmB,UAAAoB,UAAR,WACEpC,KAAKC,wBAAwB2C,KAAK5C,KAAKG,eAGzCN,EAAAmB,UAAA6B,YAAA,WACE,IACE7C,KAAK2C,oBAAoBtB,cACzBrB,KAAKyC,mBAAmBpB,cACxBrB,KAAKoB,iBAAiBC,cACtB,MAAOyB,MASXjD,EAAAmB,UAAA+B,QAAA,SAAQC,GACN,YADM,IAAAA,IAAAA,GAAA,GACCA,EACLhD,KAAKC,wBAAwBwB,KAC3BwB,EAAAA,aAAa,KACbC,EAAAA,UAAUlD,KAAKG,eAGjBH,KAAKC,wBAAwBwB,KAC3BwB,EAAAA,aAAa,OASnBpD,EAAAmB,UAAAmC,cAAA,SAAcpD,GACZC,KAAKS,eAAiBC,EAAAA,SAAW,GAAIX,EAASC,KAAKS,gBACnDT,KAAKa,sBAtHQhB,EAAAc,gBAA4C,CACzDW,iBAAiB,EACjBM,aAAc,2BACdJ,kBAAmB,IACnBc,uBAAwB,IACxBX,cAAe,4BATlByB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAnDNC,EAAAA,2CAiFiCC,EAAAA,OAAMH,KAAA,CAAC1D,IAA6B,CAAA8D,KAAGC,EAAAA,+JA/BhF,GCrDAC,EAAA,WAIA,SAAAA,KAKA,2BALCC,EAAAA,SAAQP,KAAA,CAAC,CACRQ,QAAS,CAACC,EAAAA,kBACVC,UAAW,CAAClE,OAGd8D,EATA","sourcesContent":["import {EventEmitter, Inject, Injectable, InjectionToken, OnDestroy, Optional} from '@angular/core';\nimport {fromEvent, Observable, Subscription, timer} from 'rxjs';\nimport {debounceTime, delay, retryWhen, startWith, switchMap, tap} from 'rxjs/operators';\nimport {HttpClient} from '@angular/common/http';\nimport * as _ from 'lodash';\n\n/**\n * Instance of this interface is used to report current connection status.\n */\nexport interface ConnectionState {\n  /**\n   * \"True\" if browser has network connection. Determined by Window objects \"online\" / \"offline\" events.\n   */\n  hasNetworkConnection: boolean;\n  /**\n   * \"True\" if browser has Internet access. Determined by heartbeat system which periodically makes request to heartbeat Url.\n   */\n  hasInternetAccess: boolean;\n}\n\n/**\n * Instance of this interface could be used to configure \"ConnectionService\".\n */\nexport interface ConnectionServiceOptions {\n  /**\n   * Controls the Internet connectivity heartbeat system. Default value is 'true'.\n   */\n  enableHeartbeat?: boolean;\n  /**\n   * Url used for checking Internet connectivity, heartbeat system periodically makes \"HEAD\" requests to this URL to determine Internet\n   * connection status. Default value is \"//internethealthtest.org\".\n   */\n  heartbeatUrl?: string;\n  /**\n   * Interval used to check Internet connectivity specified in milliseconds. Default value is \"30000\".\n   */\n  heartbeatInterval?: number;\n  /**\n   * Interval used to retry Internet connectivity checks when an error is detected (when no Internet connection). Default value is \"1000\".\n   */\n  heartbeatRetryInterval?: number;\n  /**\n   * HTTP method used for requesting heartbeat Url. Default is 'head'.\n   */\n  requestMethod?: 'get' | 'post' | 'head' | 'options';\n\n}\n\n/**\n * InjectionToken for specifing ConnectionService options.\n */\nexport const ConnectionServiceOptionsToken: InjectionToken<ConnectionServiceOptions> = new InjectionToken('ConnectionServiceOptionsToken');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectionService implements OnDestroy {\n  private static DEFAULT_OPTIONS: ConnectionServiceOptions = {\n    enableHeartbeat: true,\n    heartbeatUrl: '//internethealthtest.org',\n    heartbeatInterval: 30000,\n    heartbeatRetryInterval: 1000,\n    requestMethod: 'head'\n  };\n\n  private stateChangeEventEmitter = new EventEmitter<ConnectionState>();\n\n  private currentState: ConnectionState = {\n    hasInternetAccess: false,\n    hasNetworkConnection: window.navigator.onLine\n  };\n  private offlineSubscription: Subscription;\n  private onlineSubscription: Subscription;\n  private httpSubscription: Subscription;\n  private serviceOptions: ConnectionServiceOptions;\n\n  /**\n   * Current ConnectionService options. Notice that changing values of the returned object has not effect on service execution.\n   * You should use \"updateOptions\" function.\n   */\n  get options(): ConnectionServiceOptions {\n    return _.clone(this.serviceOptions);\n  }\n\n  constructor(private http: HttpClient, @Inject(ConnectionServiceOptionsToken) @Optional() options: ConnectionServiceOptions) {\n    this.serviceOptions = _.defaults({}, options, ConnectionService.DEFAULT_OPTIONS);\n\n    this.checkNetworkState();\n    this.checkInternetState();\n  }\n\n  private checkInternetState() {\n\n    if (!_.isNil(this.httpSubscription)) {\n      this.httpSubscription.unsubscribe();\n    }\n\n    if (this.serviceOptions.enableHeartbeat) {\n      this.httpSubscription = timer(0, this.serviceOptions.heartbeatInterval)\n        .pipe(\n          switchMap(() => this.http[this.serviceOptions.requestMethod](this.serviceOptions.heartbeatUrl, {responseType: 'text'})),\n          retryWhen(errors =>\n            errors.pipe(\n              // log error message\n              tap(val => {\n                console.error('Http error:', val);\n                this.currentState.hasInternetAccess = false;\n                this.emitEvent();\n              }),\n              // restart after 5 seconds\n              delay(this.serviceOptions.heartbeatRetryInterval)\n            )\n          )\n        )\n        .subscribe(result => {\n          this.currentState.hasInternetAccess = true;\n          this.emitEvent();\n        });\n    } else {\n      this.currentState.hasInternetAccess = false;\n      this.emitEvent();\n    }\n  }\n\n  private checkNetworkState() {\n    this.onlineSubscription = fromEvent(window, 'online').subscribe(() => {\n      this.currentState.hasNetworkConnection = true;\n      this.checkInternetState();\n      this.emitEvent();\n    });\n\n    this.offlineSubscription = fromEvent(window, 'offline').subscribe(() => {\n      this.currentState.hasNetworkConnection = false;\n      this.checkInternetState();\n      this.emitEvent();\n    });\n  }\n\n  private emitEvent() {\n    this.stateChangeEventEmitter.emit(this.currentState);\n  }\n\n  ngOnDestroy(): void {\n    try {\n      this.offlineSubscription.unsubscribe();\n      this.onlineSubscription.unsubscribe();\n      this.httpSubscription.unsubscribe();\n    } catch (e) {\n    }\n  }\n\n  /**\n   * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\n   * function will not report current status of the connections when initially subscribed.\n   * @param reportCurrentState Report current state when initial subscription. Default is \"true\"\n   */\n  monitor(reportCurrentState = true): Observable<ConnectionState> {\n    return reportCurrentState ?\n      this.stateChangeEventEmitter.pipe(\n        debounceTime(300),\n        startWith(this.currentState),\n      )\n      :\n      this.stateChangeEventEmitter.pipe(\n        debounceTime(300)\n      );\n  }\n\n  /**\n   * Update options of the service. You could specify partial options object. Values that are not specified will use default / previous\n   * option values.\n   * @param options Partial option values.\n   */\n  updateOptions(options: Partial<ConnectionServiceOptions>) {\n    this.serviceOptions = _.defaults({}, options, this.serviceOptions);\n    this.checkInternetState();\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {ConnectionService} from './connection-service.service';\nimport {HttpClientModule} from '@angular/common/http';\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [ConnectionService]\n})\nexport class ConnectionServiceModule {\n}\n"]}